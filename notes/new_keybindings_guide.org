#+TITLE: Instructions for new keybinding scheme
* Background
Here's a note describing the problem I'm trying to solve here.
#+begin_quote
My current UI situation is kind of confused, because I'm a bit stuck between meow, projectile, and consult. I use meow-normal-mode for access to my most commonly-used commands, which include some consult commands like consult-buffer, consult-line, etc. Then, I have a separate keymap accessible from within meow-normal-mode, initiated by pressing the space bar. This accesses the projectile mode map (because meow-keypad-leader-dispatch is set to C-p, which is the projectile keymap prefix). But recently I have been discovering that many projectile features are implemented better by consult anyway, so I've started replacing some of the stuff in this keymap with consult alternatives. This has led to a somewhat confusing situation. I guess it's not crazy to have meow normal mode to access the most-used consult stuff and then spacebar as a prefix within meow-normal to access project-specific commands. In theory I could just get rid of projectile and try to lean on consult, but I think it has a pretty rich featureset too. Not sure how to simplify. I guess the only thing I really don't know how to replicate is "switching to project," but maybe project.el can do that?
#+end_quote

* Decisions
Here are some decisions I've made after thinking about the above problem.
** Replace projectile with project.el
I'm not really using the more complicate projectile.el stuff; project.el should suffice, because I'm using consult for all the functionality I was previously getting from projectile.

** Consolidate consult commands under the prefix M-c
  - consult-buffer will be M-c b
  - consult-find will be M-c f
  - consult-ripgrep will be M-c s
  - consult-line will be M-c x
  - consult-focus-lines will be M-c n
  - consult-outline will be M-c c
  - consult-imenu will be M-c i
  - etc.
    
  - Important: within meow-normal-mode, the prefix will just be c

* aider clarifications
Below are some questions regarding the refactor:

** round 1
#+begin_src aider-question
1. How should we handle projectile-specific functions that don't have direct project.el equivalents?
#+end_src

#+begin_answer
Just don't worry about them, they'll be taken care of by consult. However, the one exception is that projectile-switch-project needs to be replaced by the project.el equivalent and bound to "ESC" in meow-normal-mode.
#+end_answer

** round 3
#+begin_src aider-question
1. Since we're migrating from projectile to project.el, should we remove the entire projectile configuration from init-projectile.el, or maintain it for any backward compatibility?
#+end_src

#+begin_src aider-answer
#+end_src

#+begin_src aider-question
2. In the current `my-projectile-switch-to-aider-and-dired` function, `projectile-dired` is used. Would you like to replace this with a custom dired command leveraging project.el, or continue using projectile-dired for now?
#+end_src

#+begin_src aider-answer
#+end_src

#+begin_aider-question
2. Are there any keybinding conflicts to be aware of between consult/project.el/meow?
#+end_aider-question

#+begin_answer
Not conflicts exactly. One thing to be aware of is, as stated above, we want two access points into the consult keymap: M-c normally and just c within meow-normal-mode.
#+end_answer

#+begin_aider-question
3. Should we create migration helpers for existing projectile workflows?
#+end_aider-question

#+begin_answer
No, this is not necessary. There are no complicated projectile workflows to replace. I suppose the one exception is that we will need to replace my custom project-switching function, which you can find in init-projectile.el.
#+end_answer

#+begin_aider-question
4. What testing approach would you like for the transition?
#+end_aider-question

#+begin_answer
There's no testing necessary, this isn't complicated enough to warrant formal testing.
#+end_answer

** round 2
#+begin_src aider-question
1. The existing my-projectile-switch-to-aider-and-dired function in init-projectile.el needs to be migrated to project.el. Should we:
   a) Create a similar my-project-switch-to-aider-and-dired using project.el APIs?
   b) Split it into separate functions for aider/dired/magit?
   c) Keep it as-is but just change projectile- references to project-?
#+end_src

#+begin_answer
You should make a similar function that uses project.el (included in base emacs) rather than projectile.
#+end_answer

#+begin_src aider-question
2. In init-meow.el's meow-normal-define-key, the 'f' key is currently bound to consult-buffer. The design doc says consult-buffer should be under M-c b. Should we:
   a) Move consult-buffer to leader key binding and keep 'f' free?
   b) Create a wrapper that works in both modes?
   c) Leave it as-is since meow-normal-mode is special?
#+end_src

#+begin_answer 
f can go back to its default, meow-find, and consult-buffer can be M-c b as requested.
#+end_answer

#+begin_src aider-question
3. The projectile-command-map keybindings in init-projectile.el need migration to project.el. Should we:
   a) Move them to project-prefix-map?
   b) Create a custom map for our project-related workflows?
   c) Use consult's keymap instead?
#+end_src

#+begin_answer
We're going to use consult's keymaps instead, so you don't need to worry about porting projectile's keymap. The point of this refactor is that we're not really using that keymap. The meow-keypad-leader-dispatch doesn't need to be C-c p, we'll need to think of some better use for it or just leave it as its default.

However, I noticed in your thinking that you pointed out that p is currently meow-yank, a potential conflict with the project.el switch project. That's a good point, so let's make the switch project key ESC instead of p, leaving p for meow-yank. I've updated the answer to the relevant question above to reflect this change.
#+end_answer
